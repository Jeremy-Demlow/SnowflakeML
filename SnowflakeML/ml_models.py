# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_ml_models.ipynb.

# %% auto 0
__all__ = ['ModelPredictor', 'create_xgb_model']

# %% ../nbs/02_ml_models.ipynb 2
import numpy as np
from typing import Dict, Any, List, Optional
from transformers import pipeline
from snowflake.ml.modeling.distributors.xgboost import XGBEstimator, XGBScalingConfig
from snowflake.ml.data.data_connector import DataConnector
from snowflake.snowpark.dataframe import DataFrame


# %% ../nbs/02_ml_models.ipynb 3
class ModelPredictor:
    """Zero-shot classification model for review quality prediction."""
    
    def __init__(self, model_name: str = "facebook/bart-large-mnli",
                 candidate_labels: List[str] = None):
        """Initialize the model predictor.
        
        Args:
            model_name: HuggingFace model name for zero-shot classification
            candidate_labels: List of labels for classification
        """
        if candidate_labels is None:
            candidate_labels = [
                'detailed with specific information and experience', 
                'basic accurate information', 
                'generic brief with no details'
            ]
        
        self.candidate_labels = candidate_labels
        self.classifier = pipeline("zero-shot-classification", model=model_name)

    def __call__(self, batch: Dict[str, Any]) -> Dict[str, Any]:
        """Predict review quality for a batch of reviews.
        
        Args:
            batch: Dictionary containing review text data
            
        Returns:
            Updated batch with prediction results
        """
        resp = self.classifier(batch["REVIEW_TEXT"].tolist(), self.candidate_labels)

        # Handle both resp and batch results
        if isinstance(resp, dict):
            raise ValueError(f"Expected batch response, got {resp} for batch {batch['REVIEW_TEXT']}")
            
        # Add results to batch
        batch["REVIEW_QUALITY"] = np.array([
            result["labels"][np.argmax(result["scores"])] for result in resp
        ])
        
        return batch


# %% ../nbs/02_ml_models.ipynb 4
def create_xgb_model(config: Dict[str, Any] = None) -> XGBEstimator:
    """Create and configure XGBoost estimator.
    
    Args:
        config: Configuration dictionary with model parameters
        
    Returns:
        Configured XGBEstimator
    """
    if config is None:
        params = {
            "eta": 0.1,
            "max_depth": 8,
            "min_child_weight": 100,
            "tree_method": "hist",
        }
        n_estimators = 50
    else:
        ml_config = config.get('ml', {}).get('models', {}).get('purchase_prediction', {})
        params = {
            "eta": ml_config.get('learning_rate', 0.1),
            "max_depth": ml_config.get('max_depth', 8),
            "min_child_weight": 100,
            "tree_method": "hist",
        }
        n_estimators = ml_config.get('n_estimators', 50)
    
    scaling_config = XGBScalingConfig(use_gpu=False)
    
    estimator = XGBEstimator(
        n_estimators=n_estimators,
        objective="reg:squarederror",
        params=params,
        scaling_config=scaling_config,
    )
    
    return estimator

