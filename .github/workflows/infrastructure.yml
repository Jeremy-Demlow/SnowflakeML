name: Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      force_recreate:
        description: 'Force recreate resources'
        required: false
        default: false
        type: boolean
  push:
    paths:
      - 'config*.yaml'
      - 'cli-setup.sh'
    branches: [main]

env:
  # Snowflake CLI connection environment variables
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_USER: ${{ vars.SNOWFLAKE_USER }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_ROLE: ${{ vars.SNOWFLAKE_ROLE }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_WAREHOUSE: ${{ vars.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_DATABASE: ${{ vars.SNOWFLAKE_DATABASE }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_SCHEMA: ${{ vars.SNOWFLAKE_SCHEMA }}
  # Legacy environment variables for SQL commands
  SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_USER: ${{ vars.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ROLE: ${{ vars.SNOWFLAKE_ROLE }}
  SNOWFLAKE_WAREHOUSE: ${{ vars.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_DATABASE: ${{ vars.SNOWFLAKE_DATABASE }}
  SNOWFLAKE_SCHEMA: ${{ vars.SNOWFLAKE_SCHEMA }}

jobs:
  setup-infrastructure:
    name: Setup Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development' }}
    
    outputs:
      infrastructure_ready: ${{ steps.setup.outputs.ready }}
      environment: ${{ steps.setup.outputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: "./config.toml"

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Test Basic Connectivity
        run: |
          echo "üîç Testing basic Snowflake connectivity (without database)..."
          
          # Test basic connection without specifying database
          snow sql -q "SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_ACCOUNT()" || {
            echo "‚ùå Basic Snowflake connection failed"
            echo "Please check your credentials and network connectivity"
            exit 1
          }
          
          echo "‚úÖ Basic Snowflake connectivity verified"
          echo "  User: $(snow sql -q "SELECT CURRENT_USER()" --format json | jq -r '.[0]["CURRENT_USER()"]')"
          echo "  Role: $(snow sql -q "SELECT CURRENT_ROLE()" --format json | jq -r '.[0]["CURRENT_ROLE()"]')"
          echo "  Account: $(snow sql -q "SELECT CURRENT_ACCOUNT()" --format json | jq -r '.[0]["CURRENT_ACCOUNT()"]')"

      - name: Setup Infrastructure
        id: setup
        env:
          ENV: ${{ inputs.environment || 'development' }}
        run: |
          echo "üöÄ Setting up infrastructure for: $ENV"
          
          # Show configuration
          echo "üìã Configuration:"
          ls -la config*.yaml || echo "  No config files found"
          
          if [ "$ENV" != "development" ] && [ -f "config-${ENV}.yaml" ]; then
            echo "  Using: config-${ENV}.yaml"
          else
            echo "  Using: config.yaml"
          fi
          
          # Run setup
          chmod +x ./cli-setup.sh
          
          if [ "${{ inputs.force_recreate }}" == "true" ]; then
            echo "‚ö†Ô∏è  Force recreate enabled"
            export FORCE_RECREATE=true
          fi
          
          ./cli-setup.sh
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "‚úÖ Infrastructure setup completed"

      - name: Verify Setup
        run: |
          echo "üîç Verifying infrastructure..."
          ./cli-setup.sh verify
          echo "‚úÖ Infrastructure verification completed"

      - name: Test Full Connection
        run: |
          echo "üîç Testing full connection to created resources..."
          
          # Test connection to the specific database and schema that should now exist
          snow sql -q "USE DATABASE $SNOWFLAKE_DATABASE;" || {
            echo "‚ùå Cannot connect to database $SNOWFLAKE_DATABASE"
            exit 1
          }
          
          snow sql -q "USE SCHEMA $SNOWFLAKE_DATABASE.$SNOWFLAKE_SCHEMA;" || {
            echo "‚ùå Cannot connect to schema $SNOWFLAKE_SCHEMA"
            exit 1
          }
          
          snow sql -q "USE WAREHOUSE $SNOWFLAKE_WAREHOUSE;" || {
            echo "‚ùå Cannot connect to warehouse $SNOWFLAKE_WAREHOUSE"
            exit 1
          }
          
          echo "‚úÖ Full connection test successful"
          echo "  Database: $SNOWFLAKE_DATABASE"
          echo "  Schema: $SNOWFLAKE_SCHEMA"  
          echo "  Warehouse: $SNOWFLAKE_WAREHOUSE" 