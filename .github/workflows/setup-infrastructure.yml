name: Setup Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      force_recreate:
        description: 'Force recreate resources (use with caution)'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: 'development'
      force_recreate:
        required: false
        type: boolean
        default: false

env:
  # Snowflake CLI connection environment variables
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_USER: ${{ vars.SNOWFLAKE_USER }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_ROLE: ${{ vars.SNOWFLAKE_ROLE }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_WAREHOUSE: ${{ vars.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_DATABASE: ${{ vars.SNOWFLAKE_DATABASE }}
  SNOWFLAKE_CONNECTIONS_ML_PIPELINE_SCHEMA: ${{ vars.SNOWFLAKE_SCHEMA }}
  # Legacy environment variables for SQL commands
  SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
  SNOWFLAKE_USER: ${{ vars.SNOWFLAKE_USER }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ROLE: ${{ vars.SNOWFLAKE_ROLE }}
  SNOWFLAKE_WAREHOUSE: ${{ vars.SNOWFLAKE_WAREHOUSE }}
  SNOWFLAKE_DATABASE: ${{ vars.SNOWFLAKE_DATABASE }}
  SNOWFLAKE_SCHEMA: ${{ vars.SNOWFLAKE_SCHEMA }}

jobs:
  setup-infrastructure:
    name: Setup Snowflake Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development' }}
    
    outputs:
      infrastructure_ready: ${{ steps.verify.outputs.ready }}
      database_exists: ${{ steps.check.outputs.database_exists }}
      schema_exists: ${{ steps.check.outputs.schema_exists }}
      warehouse_exists: ${{ steps.check.outputs.warehouse_exists }}
      compute_pool_exists: ${{ steps.check.outputs.compute_pool_exists }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: "./config.toml"

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Test Snowflake Connection
        run: |
          # Test connection (credentials loaded from environment variables)
          snow connection test
          echo "‚úÖ Snowflake connection verified"

      - name: Check Existing Infrastructure
        id: check
        run: |
          echo "üîç Checking existing infrastructure..."
          
          # Check if database exists
          if snow sql -q "SHOW DATABASES LIKE '${{ env.SNOWFLAKE_DATABASE }}'" | grep -q "${{ env.SNOWFLAKE_DATABASE }}"; then
            echo "database_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Database ${{ env.SNOWFLAKE_DATABASE }} exists"
          else
            echo "database_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Database ${{ env.SNOWFLAKE_DATABASE }} does not exist"
          fi
          
          # Check if schema exists
          if snow sql -q "SHOW SCHEMAS IN DATABASE ${{ env.SNOWFLAKE_DATABASE }}" 2>/dev/null | grep -q "${{ env.SNOWFLAKE_SCHEMA }}"; then
            echo "schema_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Schema ${{ env.SNOWFLAKE_SCHEMA }} exists"
          else
            echo "schema_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Schema ${{ env.SNOWFLAKE_SCHEMA }} does not exist"
          fi
          
          # Check if warehouse exists
          if snow sql -q "SHOW WAREHOUSES LIKE '${{ env.SNOWFLAKE_WAREHOUSE }}'" | grep -q "${{ env.SNOWFLAKE_WAREHOUSE }}"; then
            echo "warehouse_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Warehouse ${{ env.SNOWFLAKE_WAREHOUSE }} exists"
          else
            echo "warehouse_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Warehouse ${{ env.SNOWFLAKE_WAREHOUSE }} does not exist"
          fi
          
          # Check if compute pool exists
          if snow sql -q "SHOW COMPUTE POOLS LIKE 'HOL_COMPUTE_POOL_HIGHMEM'" 2>/dev/null | grep -q "HOL_COMPUTE_POOL_HIGHMEM"; then
            echo "compute_pool_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Compute pool HOL_COMPUTE_POOL_HIGHMEM exists"
          else
            echo "compute_pool_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Compute pool HOL_COMPUTE_POOL_HIGHMEM does not exist"
          fi

      - name: Setup Infrastructure
        if: ${{ steps.check.outputs.database_exists == 'false' || steps.check.outputs.schema_exists == 'false' || steps.check.outputs.warehouse_exists == 'false' || steps.check.outputs.compute_pool_exists == 'false' || inputs.force_recreate }}
        env:
          ENV: ${{ inputs.environment || 'development' }}
        run: |
          echo "üöÄ Running infrastructure setup for environment: $ENV"
          
          # Make setup script executable
          chmod +x ./cli-setup.sh
          
          # Show available configuration files
          echo "üìã Available Configuration Files:"
          ls -la config*.yaml || echo "  No config files found"
          echo ""
          
          # Determine which config file will be used
          if [ "$ENV" != "development" ] && [ -f "config-${ENV}.yaml" ]; then
            CONFIG_FILE="config-${ENV}.yaml"
            echo "üéØ Using environment-specific config: $CONFIG_FILE"
          elif [ -f "config.yaml" ]; then
            CONFIG_FILE="config.yaml"
            echo "üéØ Using default config: $CONFIG_FILE"
          else
            echo "‚ö†Ô∏è  No config file found, using environment variables only"
          fi
          
          # Show environment configuration
          echo "üìã Environment Configuration:"
          echo "  Environment: $ENV"
          echo "  Config File: ${CONFIG_FILE:-none}"
          echo "  Database: $SNOWFLAKE_DATABASE"
          echo "  Schema: $SNOWFLAKE_SCHEMA" 
          echo "  Warehouse: $SNOWFLAKE_WAREHOUSE"
          
          if [ -n "${CONFIG_FILE:-}" ]; then
            echo "  Config Values:"
            echo "    Compute Pool: $(yq '.snowflake.compute_pool.name // "HOL_COMPUTE_POOL_HIGHMEM"' "$CONFIG_FILE")"
            echo "    Pool Family: $(yq '.snowflake.compute_pool.family // "HIGHMEM_X64_M"' "$CONFIG_FILE")"
            echo "    Max Nodes: $(yq '.snowflake.compute_pool.max_nodes // "2"' "$CONFIG_FILE")"
            echo "    Integration: $(yq '.snowflake.external_access_integration.name // "ALLOW_ALL_ACCESS_INTEGRATION"' "$CONFIG_FILE")"
          fi
          echo ""
          
          # Run infrastructure setup
          if [ "${{ inputs.force_recreate }}" == "true" ]; then
            echo "‚ö†Ô∏è  Force recreate enabled - this will drop and recreate resources"
            echo "FORCE_RECREATE=true" >> $GITHUB_ENV
          fi
          
          # Set config file for the script
          export CONFIG_FILE="${CONFIG_FILE:-config.yaml}"
          
          # Run the setup script with environment awareness
          ./cli-setup.sh
          
          echo "‚úÖ Infrastructure setup completed for $ENV environment using $CONFIG_FILE"

      - name: Skip Infrastructure Setup
        if: ${{ steps.check.outputs.database_exists == 'true' && steps.check.outputs.schema_exists == 'true' && steps.check.outputs.warehouse_exists == 'true' && steps.check.outputs.compute_pool_exists == 'true' && !inputs.force_recreate }}
        run: |
          echo "‚úÖ All infrastructure already exists, skipping setup"
          echo "  - Database: ${{ env.SNOWFLAKE_DATABASE }} ‚úÖ"
          echo "  - Schema: ${{ env.SNOWFLAKE_SCHEMA }} ‚úÖ" 
          echo "  - Warehouse: ${{ env.SNOWFLAKE_WAREHOUSE }} ‚úÖ"
          echo "  - Compute Pool: HOL_COMPUTE_POOL_HIGHMEM ‚úÖ"

      - name: Verify Infrastructure
        id: verify
        run: |
          echo "üîç Verifying infrastructure setup..."
          
          # Verify all components exist and are accessible
          failed=false
          
          # Test database access
          if ! snow sql -q "USE DATABASE ${{ env.SNOWFLAKE_DATABASE }}" > /dev/null 2>&1; then
            echo "‚ùå Cannot access database ${{ env.SNOWFLAKE_DATABASE }}"
            failed=true
          else
            echo "‚úÖ Database ${{ env.SNOWFLAKE_DATABASE }} accessible"
          fi
          
          # Test schema access
          if ! snow sql -q "USE SCHEMA ${{ env.SNOWFLAKE_DATABASE }}.${{ env.SNOWFLAKE_SCHEMA }}" > /dev/null 2>&1; then
            echo "‚ùå Cannot access schema ${{ env.SNOWFLAKE_SCHEMA }}"
            failed=true
          else
            echo "‚úÖ Schema ${{ env.SNOWFLAKE_SCHEMA }} accessible"
          fi
          
          # Test warehouse
          if ! snow sql -q "USE WAREHOUSE ${{ env.SNOWFLAKE_WAREHOUSE }}" > /dev/null 2>&1; then
            echo "‚ùå Cannot use warehouse ${{ env.SNOWFLAKE_WAREHOUSE }}"
            failed=true
          else
            echo "‚úÖ Warehouse ${{ env.SNOWFLAKE_WAREHOUSE }} accessible"
          fi
          
          # Test compute pool (this might fail if pool is not started, but that's ok)
          if snow sql -q "SHOW COMPUTE POOLS LIKE 'HOL_COMPUTE_POOL_HIGHMEM'" | grep -q "HOL_COMPUTE_POOL_HIGHMEM"; then
            echo "‚úÖ Compute pool HOL_COMPUTE_POOL_HIGHMEM exists"
          else
            echo "‚ö†Ô∏è  Compute pool HOL_COMPUTE_POOL_HIGHMEM not found (may need manual start)"
          fi
          
          # Test external access integration
          if snow sql -q "SHOW INTEGRATIONS LIKE 'ALLOW_ALL_ACCESS_INTEGRATION'" | grep -q "ALLOW_ALL_ACCESS_INTEGRATION"; then
            echo "‚úÖ External access integration exists"
          else
            echo "‚ö†Ô∏è  External access integration not found"
          fi
          
          if [ "$failed" == "true" ]; then
            echo "‚ùå Infrastructure verification failed"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Infrastructure verification successful"
            echo "ready=true" >> $GITHUB_OUTPUT
          fi

      - name: Infrastructure Summary
        run: |
          echo "üìã Infrastructure Setup Summary"
          echo "================================"
          echo "Environment: ${{ inputs.environment || 'development' }}"
          echo "Database: ${{ env.SNOWFLAKE_DATABASE }}"
          echo "Schema: ${{ env.SNOWFLAKE_SCHEMA }}"
          echo "Warehouse: ${{ env.SNOWFLAKE_WAREHOUSE }}"
          echo "Compute Pool: HOL_COMPUTE_POOL_HIGHMEM"
          echo "External Access: ALLOW_ALL_ACCESS_INTEGRATION"
          echo ""
          echo "üéØ Next Steps:"
          echo "1. Run notebook deployment workflow"
          echo "2. Add notebooks to sf_nbs/ directory"
          echo "3. Push changes to trigger deployment" 